{"ast":null,"code":"var _jsxFileName = \"/home/yuval/Desktop/chatbot_app/Chatbot/web/src/components/LeftMenu/NavChatsList/NavChatList.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport NavChat from \"./NavChat\";\nimport { useChat } from \"../../../contexts/ChatContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NavChatList = props => {\n  // const {chats} = useChat()\n  // const [currentChats,setCurrentChats] = useState()\n  // useEffect(() => {\n  //     // Compare previous chats with current chats\n  //     // For simplicity, let's assume that chats are considered new if the length changes\n\n  //     const isNewChat = currentChats.length !== chats.length;\n\n  //     if (isNewChat) {\n  //         const newChats = chats.map((chat) => ({ ...chat, new: !currentChats.find((c) => c.id === chat.id) }));\n\n  //       // Do something when a new chat is detected\n  //       console.log('New chat detected!');\n  //       // Update the state to trigger a re-render\n  //       setCurrentChats(chats);\n  //     }\n  //   }, [chats, currentChats]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"LOADING...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navPromptWrapper\",\n      children: chats.map((chat, index) => /*#__PURE__*/_jsxDEV(NavChat, {\n        title: chat.title\n      }, `chat_${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n_c = NavChatList;\nexport default NavChatList;\nvar _c;\n$RefreshReg$(_c, \"NavChatList\");","map":{"version":3,"names":["React","useEffect","useState","NavChat","useChat","jsxDEV","_jsxDEV","Fragment","_Fragment","NavChatList","props","children","loading","fileName","_jsxFileName","lineNumber","columnNumber","className","chats","map","chat","index","title","_c","$RefreshReg$"],"sources":["/home/yuval/Desktop/chatbot_app/Chatbot/web/src/components/LeftMenu/NavChatsList/NavChatList.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport NavChat from \"./NavChat\";\nimport { useChat } from \"../../../contexts/ChatContext\";\nconst NavChatList = (props) => {\n    // const {chats} = useChat()\n    // const [currentChats,setCurrentChats] = useState()\n    // useEffect(() => {\n    //     // Compare previous chats with current chats\n    //     // For simplicity, let's assume that chats are considered new if the length changes\n\n        \n    //     const isNewChat = currentChats.length !== chats.length;\n\n    \n    //     if (isNewChat) {\n    //         const newChats = chats.map((chat) => ({ ...chat, new: !currentChats.find((c) => c.id === chat.id) }));\n\n    //       // Do something when a new chat is detected\n    //       console.log('New chat detected!');\n    //       // Update the state to trigger a re-render\n    //       setCurrentChats(chats);\n    //     }\n    //   }, [chats, currentChats]);\n\n    return (\n        <>\n        {loading ? (<>\n            <div>\n                LOADING...\n            </div>\n        </>) : \n            (\n                <div className=\"navPromptWrapper\">\n                    {chats.map((chat, index) =>\n                        <NavChat title={chat.title} key={`chat_${index}`} />)\n                    }\n                </div>\n            )}\n        </>\n    );\n}\nexport default NavChatList;\n\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAASC,OAAO,QAAQ,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACxD,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAC3B;EACA;EACA;EACA;EACA;;EAGA;;EAGA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACIJ,OAAA,CAAAE,SAAA;IAAAG,QAAA,EACCC,OAAO,gBAAIN,OAAA,CAAAE,SAAA;MAAAG,QAAA,eACRL,OAAA;QAAAK,QAAA,EAAK;MAEL;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC,gBACR,CAAC,gBAEKV,OAAA;MAAKW,SAAS,EAAC,kBAAkB;MAAAN,QAAA,EAC5BO,KAAK,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACnBf,OAAA,CAACH,OAAO;QAACmB,KAAK,EAAEF,IAAI,CAACE;MAAM,GAAO,QAAOD,KAAM,EAAC;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAExD;EACR,gBACH,CAAC;AAEX,CAAC;AAAAO,EAAA,GArCKd,WAAW;AAsCjB,eAAeA,WAAW;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}