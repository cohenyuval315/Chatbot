{"ast":null,"code":"class APIClient {\n  constructor(host, port) {\n    this._instance = null;\n    if (APIClient._instance) {\n      return APIClient._instance;\n    }\n    APIClient.instance = this;\n    this.host = host;\n    this.port = port;\n    this.base_url = `${this.host}:${this.port}`;\n  }\n  async _request(method, endpoint, body = null) {\n    console.info();\n    const requestOptions = {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    if (body !== null) {\n      requestOptions.body = JSON.stringify(body);\n    }\n    try {\n      const response = await fetch(`${this.base_url}${endpoint}`, requestOptions);\n      console.log(\"response:\");\n      console.log(response);\n      const data = await response.json();\n      console.log(\"response after json:\");\n      console.log(data);\n      if (response.ok) {\n        if (response.statusCode !== 200) {} else {}\n        return data;\n      } else {\n        console.error(`Request failed with status ${response.status}: ${data.message}`);\n        throw new Error(data.message || 'An error occurred during the request.');\n      }\n    } catch (error) {\n      console.error(error.message);\n      throw error;\n    }\n  }\n  async fetchChats() {\n    const endpoint = \"/c\";\n    const method = \"GET\";\n    const data = await this._request(method, endpoint);\n    return data;\n  }\n  async converse(chat, prompt) {\n    const chat_id = chat.id;\n    if (!chat_id) {\n      return await this.create_new_chat(prompt);\n    } else {\n      return await this.update_chat(chat_id, prompt);\n    }\n  }\n  async create_new_chat(prompt) {\n    const endpoint = \"/c\";\n    const method = \"POST\";\n    const body = {\n      \"prompt\": prompt\n    };\n    const data = await this._request(method, endpoint, body);\n    return data;\n  }\n  async update_chat(chat_id, prompt) {\n    const endpoint = `/c/${chat_id}`;\n    const method = \"PUT\";\n    const body = {\n      \"prompt\": prompt\n    };\n    const data = await this._request(method, endpoint, body);\n    return data;\n  }\n  async get_chat(chat_id) {\n    const endpoint = `/c/${chat_id}`;\n    const method = \"GET\";\n    const data = await this._request(method, endpoint);\n    return data;\n  }\n}\nconst client = function () {\n  const host = \"localhost\";\n  const port = 3001;\n  const api_client = new APIClient(host, port);\n  return api_client;\n}();\nexport default client;","map":{"version":3,"names":["APIClient","constructor","host","port","_instance","instance","base_url","_request","method","endpoint","body","console","info","requestOptions","headers","JSON","stringify","response","fetch","log","data","json","ok","statusCode","error","status","message","Error","fetchChats","converse","chat","prompt","chat_id","id","create_new_chat","update_chat","get_chat","client","api_client"],"sources":["/home/yuval/Desktop/chatbot_app/Chatbot/web/src/API/APIClient.jsx"],"sourcesContent":["\nclass APIClient {\n    _instance = null; \n    constructor(host,port) {  \n      if(APIClient._instance){\n        return APIClient._instance;\n      }\n      APIClient.instance = this;\n      this.host = host;\n      this.port = port;\n      this.base_url = `${this.host}:${this.port}`;\n    }\n    \n    async _request(method,endpoint, body = null) {\n      console.info()\n      const requestOptions = {\n        method: method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      };\n      if (body !== null) {\n        requestOptions.body = JSON.stringify(body);\n      }\n    \n      try {\n        const response = await fetch(`${this.base_url}${endpoint}`, requestOptions);\n        console.log(\"response:\");\n        console.log(response);\n        const data = await response.json();\n        console.log(\"response after json:\");\n        console.log(data);\n        if (response.ok) {\n          if (response.statusCode !== 200){\n            \n          }else{\n            \n          }\n          return data; \n        } else {\n          console.error(`Request failed with status ${response.status}: ${data.message}`);\n          throw new Error(data.message || 'An error occurred during the request.');\n        }\n      } catch (error) {\n        console.error(error.message);\n        throw error;\n      }\n    }\n\n    async fetchChats() {\n      const endpoint = \"/c\"\n      const method = \"GET\"\n      const data = await this._request(method,endpoint)\n      return data;\n    }\n\n    async converse(chat,prompt){\n      const chat_id = chat.id\n      if (!chat_id){\n        return await this.create_new_chat(prompt)\n      }else{\n        return await this.update_chat(chat_id,prompt)\n      }\n    }\n\n    async create_new_chat(prompt){\n      const endpoint = \"/c\"\n      const method = \"POST\"\n      const body = {\n        \"prompt\":prompt\n      }\n      const data = await this._request(method,endpoint,body)\n      return data;\n    }\n\n    async update_chat(chat_id,prompt){\n      const endpoint = `/c/${chat_id}`\n      const method = \"PUT\"\n      const body = {\n        \"prompt\":prompt\n      }\n      const data = await this._request(method,endpoint,body);\n      return data;\n    }\n\n    async get_chat(chat_id){\n      const endpoint = `/c/${chat_id}`\n      const method = \"GET\"\n      const data = await this._request(method,endpoint);\n      return data;\n    }\n\n\n}\n\nconst client = (function() {\n  const host = \"localhost\"\n  const port = 3001\n  const api_client = new APIClient(host,port);\n  return api_client;\n})();\n\n\nexport default client;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}