{"ast":null,"code":"var _jsxFileName = \"/home/yuval/Desktop/chatbot_app/Chatbot/web/src/contexts/ChatContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport client from '../API/APIClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\nexport function useChat() {\n  _s();\n  return useContext(ChatContext);\n}\n_s(useChat, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const newChat = {\n  \"chat_id\": null,\n  \"title\": null,\n  \"log\": []\n};\nexport const introChat = {\n  \"chat_id\": -1,\n  \"title\": null,\n  \"log\": []\n};\nexport function ChatProvider({\n  children\n}) {\n  _s2();\n  const [chats, setChats] = useState(null);\n  const [selectedChat, setSelectedChat] = useState(introChat);\n  const [tempItem, setTempItem] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedChatLoading, setSelectedChatLoading] = useState(false);\n  const [selectedChatError, setSelectedChatError] = useState(false);\n  const [error, setError] = useState(false);\n  const printInterval = 50;\n  useEffect(() => {\n    fetchChats().then(data => {\n      setLoading(false);\n    });\n  }, []);\n  const fetchChats = useCallback(async () => {\n    try {\n      const chatsData = await client.fetchChats();\n      const data = chatsData['data'];\n      setChats(data);\n      setError(false);\n      return data;\n    } catch (error) {\n      console.error(error);\n      setError(error);\n    }\n  }, []);\n  const createNewChat = async prompt => {\n    try {\n      const data = await client.createNewChat(prompt);\n      setError(false);\n      return data;\n    } catch (error) {\n      setError(error);\n    }\n  };\n  const onChatSelect = async item => {\n    try {\n      setSelectedChatLoading(true);\n      const chat_id = item.chat_id;\n      const chatData = await client.getChat(chat_id);\n      const data = chatData['data'];\n      setSelectedChat(data);\n      setSelectedChatLoading(false);\n      setSelectedChatError(false);\n      return chatData;\n    } catch (error) {\n      console.error(error);\n      setSelectedChatError(error);\n      setSelectedChatLoading(false);\n    }\n  };\n  const onNewChatSelect = () => {\n    setSelectedChat(newChat);\n  };\n  const onMessageNewChat = async prompt => {\n    const item = await createNewChat(prompt);\n    const data = item['data'];\n    if (item) {\n      const selected = await onChatSelect(data);\n      if (selected) {\n        const items = await fetchChats();\n        if (items) {} else {\n          console.error(\"could not update chats items\");\n        }\n      } else {\n        console.error(\"could not select new chat\");\n      }\n    } else {\n      console.error(\"could not create new chat\");\n    }\n  };\n  const onChatConverse = async prompt => {\n    setTempItem(null);\n    if (selectedChat && selectedChat.chat_id !== null && selectedChat !== -1) {\n      const updateRes = await client.updateChat(selectedChat.chat_id, prompt);\n      const res = await client.getChat(selectedChat.chat_id);\n      const chat = res['data'];\n      setSelectedChat(chat);\n    }\n  };\n  const deleteSelectedChat = async chat_id => {\n    const res = await client.deleteChat(chat_id);\n    if (res['statusCode'] === 200) {\n      setSelectedChat(newChat);\n      await fetchChats();\n    } else {}\n  };\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  const handleInputSubmit = async prompt => {\n    let res = null;\n    if (!selectedChat) {\n      console.log(\"handleInputSubmit:Should Not Be Here...\");\n      return;\n    }\n    setTempItem({\n      \"prompt_id\": null,\n      \"prompt\": prompt\n    });\n    if (selectedChat.chat_id === null || selectedChat.chat_id === -1) {\n      // Create New Chat\n      res = await onMessageNewChat(prompt);\n      setTempItem(null);\n    }\n    res = await onChatConverse(prompt);\n    return res;\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      printInterval,\n      chats,\n      selectedChat,\n      loading,\n      error,\n      selectedChatError,\n      selectedChatLoading,\n      tempItem,\n      onChatSelect,\n      onNewChatSelect,\n      onChatConverse,\n      onMessageNewChat,\n      handleInputSubmit,\n      deleteSelectedChat\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n}\n_s2(ChatProvider, \"zfO6Hxrimlit9hdMcS70e4/kIaE=\");\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useCallback","useContext","useEffect","useState","client","jsxDEV","_jsxDEV","ChatContext","useChat","_s","newChat","introChat","ChatProvider","children","_s2","chats","setChats","selectedChat","setSelectedChat","tempItem","setTempItem","loading","setLoading","selectedChatLoading","setSelectedChatLoading","selectedChatError","setSelectedChatError","error","setError","printInterval","fetchChats","then","data","chatsData","console","createNewChat","prompt","onChatSelect","item","chat_id","chatData","getChat","onNewChatSelect","onMessageNewChat","selected","items","onChatConverse","updateRes","updateChat","res","chat","deleteSelectedChat","deleteChat","sleep","ms","Promise","resolve","setTimeout","handleInputSubmit","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/yuval/Desktop/chatbot_app/Chatbot/web/src/contexts/ChatContext.jsx"],"sourcesContent":["\nimport React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport client from '../API/APIClient';\n\n\nconst ChatContext = createContext();\n\nexport function useChat() {\n  return useContext(ChatContext);\n}\n\nexport const newChat = {\n  \"chat_id\":null,\n  \"title\":null,\n  \"log\":[]\n}\n\nexport const introChat = {\n  \"chat_id\":-1,\n  \"title\":null,\n  \"log\":[]\n}\n\n\n\n\n\nexport function ChatProvider({ children }) {\n  const [chats, setChats] = useState(null);\n  const [selectedChat, setSelectedChat] = useState(introChat);\n  const [tempItem,setTempItem] = useState(null);\n  \n  const [loading, setLoading] = useState(true)\n  const [selectedChatLoading, setSelectedChatLoading] = useState(false);\n  const [selectedChatError, setSelectedChatError] = useState(false);\n  const [error, setError] = useState(false);\n\n  const printInterval = 50;\n\n  useEffect(()=>{\n    fetchChats().then((data)=>{\n      setLoading(false);\n    })\n  },[])\n\n  const fetchChats = useCallback(async () => {\n    try {\n      const chatsData = await client.fetchChats()\n      const data = chatsData['data']\n      setChats(data);\n      setError(false);\n      return data;\n    } catch (error) {\n      console.error(error);\n      setError(error);\n    }\n  },[])\n\n  const createNewChat = async (prompt) => {\n    try {\n      const data = await client.createNewChat(prompt);\n      setError(false);\n      return data;\n    } catch (error){\n      setError(error);\n    }\n  }\n\n  const onChatSelect = async  (item) => {\n    try {\n      setSelectedChatLoading(true);\n      const chat_id = item.chat_id;\n      const chatData = await client.getChat(chat_id);\n      const data = chatData['data']\n      setSelectedChat(data);\n      setSelectedChatLoading(false);\n      setSelectedChatError(false);\n      return chatData;\n    } catch (error){\n      console.error(error);\n      setSelectedChatError(error);\n      setSelectedChatLoading(false);\n    }\n    \n  }\n\n  const onNewChatSelect = () => {\n    setSelectedChat(newChat);\n  }\n\n  const onMessageNewChat = async (prompt) => {\n    const item = await createNewChat(prompt);\n    const data = item['data'];\n    if (item){\n      const selected = await onChatSelect(data);\n      if (selected){\n        const items = await fetchChats();\n        if (items){\n\n        }else{\n          console.error(\"could not update chats items\");\n        }\n\n      }else{\n        console.error(\"could not select new chat\");\n      }\n    }else{\n      console.error(\"could not create new chat\");\n    }\n  }\n\n  const onChatConverse = async (prompt) => {\n    setTempItem(null);\n    if (selectedChat && selectedChat.chat_id !== null && selectedChat !== -1){\n      const updateRes = await client.updateChat(selectedChat.chat_id,prompt);\n      const res = await client.getChat(selectedChat.chat_id);\n      const chat = res['data']\n      setSelectedChat(chat);\n    }\n\n  }\n\n  const deleteSelectedChat = async (chat_id) => {\n    const res = await client.deleteChat(chat_id);\n    if (res['statusCode'] === 200){\n      setSelectedChat(newChat)\n      await fetchChats()\n    }else{\n\n    }\n  }\n\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  const handleInputSubmit = async (prompt) => {\n    let res = null;\n    if (!selectedChat){\n      console.log(\"handleInputSubmit:Should Not Be Here...\")\n      return\n    }\n    setTempItem({\n      \"prompt_id\":null,\n      \"prompt\":prompt\n    });\n    if(selectedChat.chat_id === null || selectedChat.chat_id === -1){ // Create New Chat\n      res = await onMessageNewChat(prompt);\n      setTempItem(null);\n    }\n      res =  await onChatConverse(prompt);\n      \n    \n    return res;\n  }\n\n\n\n\n\n  return (\n    <ChatContext.Provider value={{ \n      printInterval,\n      chats,\n      selectedChat, \n      loading,\n      error,\n      selectedChatError,\n      selectedChatLoading, \n      tempItem,\n      onChatSelect, \n      onNewChatSelect,\n      onChatConverse,\n      onMessageNewChat,\n      handleInputSubmit,\n      deleteSelectedChat\n       }}>\n      {children}\n    </ChatContext.Provider>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}