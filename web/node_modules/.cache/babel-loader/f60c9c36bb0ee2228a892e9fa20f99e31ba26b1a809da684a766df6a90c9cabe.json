{"ast":null,"code":"import { v4 as uuid } from \"uuid\";\nclass APIClient {\n  constructor() {\n    if (!APIClient.instance) {\n      APIClient.instance = this;\n      this.host = \"localhost\";\n      this.port = 3001;\n      this.base_url = `${this.host}:${this.port}`;\n    }\n  }\n  async fetchChats() {\n    // get /c\n    const path = \"/c\";\n    const method = \"GET\";\n    const url = this.base_url + path;\n    const response = await fetch(url, {\n      method: method,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const res = await response.json();\n    if (res.statusCode !== 200) {\n      return [];\n    } else {\n      return res.data;\n    }\n    const chatData = [{\n      \"id\": uuid(),\n      \"title\": \"hello\",\n      \"log\": [{\n        id: uuid(),\n        prompt: \"text1(user)\",\n        response: \"text1(bot)\"\n      }, {\n        id: uuid(),\n        prompt: \"text2(user)\",\n        response: \"text2(bot)\"\n      }]\n    }, {\n      \"id\": uuid(),\n      \"title\": \"hello2\",\n      \"log\": [{\n        id: uuid(),\n        prompt: \"text3(user)\",\n        response: \"text1(bot)\"\n      }, {\n        id: uuid(),\n        prompt: \"text2(user)\",\n        response: \"text2(bot)\"\n      }]\n    }];\n    await this.sleep(1000);\n    return chatData;\n  }\n  sleep(ms) {\n    return new Promise(resolve => {\n      setTimeout(resolve, ms);\n    });\n  }\n  async converse(chat, prompt) {\n    const chat_id = chat.id;\n    if (!chat_id) {\n      return await self.create_new_chat(prompt);\n    } else {\n      return await self.update_chat(chat_id, prompt);\n    }\n  }\n  async create_new_chat(prompt) {\n    const path = \"/c\";\n    const method = \"POST\";\n    const url = this.base_url + path;\n    const data = {\n      \"prompt\": prompt\n    };\n    const response = await fetch(url, {\n      method: method,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    const res = await response.json();\n    if (res.statusCode !== 200) {\n      return res.message;\n    } else {\n      return res.data;\n    }\n  }\n  async update_chat(chat_id, prompt) {\n    const path = `/c/${chat_id}`;\n    const method = \"PUT\";\n    const url = this.base_url + path;\n    const data = {\n      \"prompt\": prompt\n    };\n    const response = await fetch(url, {\n      method: method,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    const res = await response.json();\n    if (res.statusCode !== 200) {\n      return res.message;\n    } else {\n      return res.data;\n    }\n  }\n}\nlet client = new APIClient();\nexport default client;","map":{"version":3,"names":["v4","uuid","APIClient","constructor","instance","host","port","base_url","fetchChats","path","method","url","response","fetch","headers","res","json","statusCode","data","chatData","id","prompt","sleep","ms","Promise","resolve","setTimeout","converse","chat","chat_id","self","create_new_chat","update_chat","body","JSON","stringify","message","client"],"sources":["/home/yuval/Desktop/chatbot_app/Chatbot/web/src/API/APIClient.jsx"],"sourcesContent":["import { v4 as uuid } from \"uuid\";\n\nclass APIClient {\n    instance \n    constructor() {  \n        if (!APIClient.instance) {\n            APIClient.instance = this;\n            this.host = \"localhost\"\n            this.port = 3001\n            this.base_url = `${this.host}:${this.port}`;\n        }\n    }\n\n\n    async fetchChats() {\n      // get /c\n      const path = \"/c\"\n      const method = \"GET\"\n      const url = this.base_url + path\n      const response = await fetch(url, {\n        method: method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n        }\n      });\n      const res = await response.json();\n      if (res.statusCode !== 200){\n        return []\n      }else{\n        return res.data\n      }\n\n        const chatData = [\n            {\n              \"id\":uuid(),\n              \"title\":\"hello\",\n              \"log\": [\n                {\n                  id:uuid(),\n                  prompt:\"text1(user)\",\n                  response:\"text1(bot)\",\n                },\n                {\n                  id:uuid(),\n                  prompt:\"text2(user)\",\n                  response:\"text2(bot)\",\n                }          \n              ]\n            },\n            {\n              \"id\":uuid(),\n              \"title\":\"hello2\",\n              \"log\": [\n                {\n                  id:uuid(),\n                  prompt:\"text3(user)\",\n                  response:\"text1(bot)\",\n                },\n                {\n                  id:uuid(),\n                  prompt:\"text2(user)\",\n                  response:\"text2(bot)\",\n                }          \n              ]\n            }\n        ]\n        await this.sleep(1000);\n        return chatData\n    }\n\n    sleep(ms) {\n      return new Promise(resolve => {\n        setTimeout(resolve, ms);\n      });\n    }\n    \n    async converse(chat,prompt){\n      const chat_id = chat.id\n      if (!chat_id){\n        return await self.create_new_chat(prompt)\n      }else{\n        return await self.update_chat(chat_id,prompt)\n      }\n    }\n\n    async create_new_chat(prompt){\n      const path = \"/c\"\n      const method = \"POST\"\n      const url = this.base_url + path\n      const data = {\n        \"prompt\":prompt\n      }\n      const response = await fetch(url, {\n        method: method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      const res = await response.json();\n      if (res.statusCode !== 200){\n        return res.message\n      }else{\n        return res.data\n      }\n    }\n\n    async update_chat(chat_id,prompt){\n      const path = `/c/${chat_id}`\n      const method = \"PUT\"\n      const url = this.base_url + path\n      const data = {\n        \"prompt\":prompt\n      }\n      const response = await fetch(url, {\n        method: method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      const res = await response.json();\n      if (res.statusCode !== 200){\n        return res.message\n      }else{\n        return res.data\n      }\n    }\n\n}\n\n\nlet client = new APIClient();\n\n\nexport default client;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}