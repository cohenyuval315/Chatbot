{"ast":null,"code":"var _jsxFileName = \"/home/yuval/Desktop/chatbot_app/Chatbot/web/src/components/ChatBox/ChatLog.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useChat } from \"../../contexts/ChatContext\";\nimport ChatPrompt from \"./ChatLog/ChatPrompt\";\nimport BotMessage from \"./ChatLog/BotMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatLog = () => {\n  _s();\n  const {\n    selectedChat,\n    tempItem\n  } = useChat();\n  const [currentSelectedChat, setCurrentSelectedChat] = useState(null);\n  const [currentChatLogs, setCurrentChatLogs] = useState(null);\n  const chatLogRef = useRef(null);\n  useEffect(() => {\n    if (currentSelectedChat === null || currentSelectedChat.chat_id !== selectedChat.chat_id) {\n      setCurrentSelectedChat(selectedChat);\n      const logs = selectedChat.logs.map(c => {\n        c.new = false;\n        return c;\n      });\n      console.log(logs);\n      setCurrentChatLogs(logs);\n      return;\n    }\n    if (tempItem === null) {\n      setCurrentChatLogs(prev => [...prev.filter(item => item.prompt_id !== -1)]);\n    }\n    console.log(\"IS TEMP ITEM NULL\", tempItem !== null);\n    if (selectedChat.logs.length !== currentChatLogs.length && tempItem === null || selectedChat.logs.length !== currentChatLogs.length - 1 && tempItem !== null) {\n      const newLogs = selectedChat.logs.map(log => {\n        if ([...currentChatLogs.map(item => item.prompt_id)].includes(log.prompt_id)) {\n          log.new = false;\n        } else {\n          log.new = true;\n        }\n        return log;\n      });\n      if (tempItem === null) {\n        setCurrentChatLogs(newLogs);\n      } else {\n        setCurrentChatLogs(prev => [...prev, tempItem]);\n      }\n    }\n\n    // if (tempItem !== null){\n    //   setCurrentChatLogs(prev=>[...prev,tempItem]);\n    // }\n  }, [selectedChat, tempItem]);\n  useEffect(() => {\n    if (chatLogRef.current) {\n      chatLogRef.current.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"end\"\n      });\n    }\n    return () => {};\n  }, [selectedChat, tempItem]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatLogWrapper\",\n    children: currentChatLogs && Array.isArray(currentChatLogs) && currentChatLogs.length > 0 && currentChatLogs.map((log, idx) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chatLogRef,\n        className: \"chatLog\",\n        children: [/*#__PURE__*/_jsxDEV(ChatPrompt, {\n          text: log.prompt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(BotMessage, {\n          chatLogRef: chatLogRef,\n          response: log.response,\n          animate: log.new\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this)]\n      }, `msg_${idx}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatLog, \"FYn4a7qQQ0ACesI2rlKCMdYMRQQ=\", false, function () {\n  return [useChat];\n});\n_c = ChatLog;\nexport default ChatLog;\nvar _c;\n$RefreshReg$(_c, \"ChatLog\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useChat","ChatPrompt","BotMessage","jsxDEV","_jsxDEV","ChatLog","_s","selectedChat","tempItem","currentSelectedChat","setCurrentSelectedChat","currentChatLogs","setCurrentChatLogs","chatLogRef","chat_id","logs","map","c","new","console","log","prev","filter","item","prompt_id","length","newLogs","includes","current","scrollIntoView","behavior","block","className","children","Array","isArray","idx","ref","text","prompt","fileName","_jsxFileName","lineNumber","columnNumber","response","animate","_c","$RefreshReg$"],"sources":["/home/yuval/Desktop/chatbot_app/Chatbot/web/src/components/ChatBox/ChatLog.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { useChat } from \"../../contexts/ChatContext\";\nimport ChatPrompt from \"./ChatLog/ChatPrompt\";\nimport BotMessage from \"./ChatLog/BotMessage\";\n\nconst ChatLog = () => {\nconst {selectedChat,tempItem} = useChat();\nconst [currentSelectedChat,setCurrentSelectedChat] = useState(null);\nconst [currentChatLogs,setCurrentChatLogs] = useState(null);\nconst chatLogRef = useRef(null);\n\nuseEffect(()=>{\n    if (currentSelectedChat === null || currentSelectedChat.chat_id !== selectedChat.chat_id){\n        setCurrentSelectedChat(selectedChat);\n        const logs = selectedChat.logs.map((c)=>{\n          c.new = false\n          return c;\n        })\n        console.log(logs);\n        setCurrentChatLogs(logs);\n        return;\n    }\n    \n    if(tempItem === null){\n      setCurrentChatLogs(prev=>[...prev.filter((item)=>item.prompt_id !== -1)]);\n    }\n\n    console.log(\"IS TEMP ITEM NULL\",tempItem !==null )\n    if(selectedChat.logs.length !== currentChatLogs.length && tempItem === null ||\n      selectedChat.logs.length !== currentChatLogs.length - 1 && tempItem !== null\n      ){\n      const newLogs = selectedChat.logs.map((log)=>{\n        if ([...currentChatLogs.map((item)=>item.prompt_id)].includes(log.prompt_id)){\n          log.new = false;\n        }else{\n          log.new = true;\n        }\n        return log;\n      })\n      if(tempItem === null){\n        setCurrentChatLogs(newLogs);\n      }else{\n        setCurrentChatLogs(prev=>[...prev,tempItem]);\n      }\n      \n    }\n\n    // if (tempItem !== null){\n    //   setCurrentChatLogs(prev=>[...prev,tempItem]);\n    // }\n    \n\n},[selectedChat,tempItem])\n\nuseEffect(() => {\n    if (chatLogRef.current) {\n      chatLogRef.current.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"end\",\n      });\n    }\n    return () => {};\n  }, [selectedChat,tempItem]);\n\n\n  return (\n    <div className=\"chatLogWrapper\">\n        {currentChatLogs && Array.isArray(currentChatLogs) && currentChatLogs.length > 0 && currentChatLogs.map((log, idx) => {\n            return (\n            <div ref={chatLogRef} className=\"chatLog\" key={`msg_${idx}`}>\n                <ChatPrompt text={log.prompt} />\n                <BotMessage chatLogRef={chatLogRef} response={log.response} animate={log.new} />\n            </div>\n        )})}\n    </div>\n  );\n};\n\nexport default ChatLog;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,OAAO,QAAQ,4BAA4B;AACpD,OAAOC,UAAU,MAAM,sBAAsB;AAC7C,OAAOC,UAAU,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAACC,YAAY;IAACC;EAAQ,CAAC,GAAGR,OAAO,CAAC,CAAC;EACzC,MAAM,CAACS,mBAAmB,EAACC,sBAAsB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACnE,MAAM,CAACY,eAAe,EAACC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC3D,MAAMc,UAAU,GAAGf,MAAM,CAAC,IAAI,CAAC;EAE/BD,SAAS,CAAC,MAAI;IACV,IAAIY,mBAAmB,KAAK,IAAI,IAAIA,mBAAmB,CAACK,OAAO,KAAKP,YAAY,CAACO,OAAO,EAAC;MACrFJ,sBAAsB,CAACH,YAAY,CAAC;MACpC,MAAMQ,IAAI,GAAGR,YAAY,CAACQ,IAAI,CAACC,GAAG,CAAEC,CAAC,IAAG;QACtCA,CAAC,CAACC,GAAG,GAAG,KAAK;QACb,OAAOD,CAAC;MACV,CAAC,CAAC;MACFE,OAAO,CAACC,GAAG,CAACL,IAAI,CAAC;MACjBH,kBAAkB,CAACG,IAAI,CAAC;MACxB;IACJ;IAEA,IAAGP,QAAQ,KAAK,IAAI,EAAC;MACnBI,kBAAkB,CAACS,IAAI,IAAE,CAAC,GAAGA,IAAI,CAACC,MAAM,CAAEC,IAAI,IAAGA,IAAI,CAACC,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3E;IAEAL,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAACZ,QAAQ,KAAI,IAAK,CAAC;IAClD,IAAGD,YAAY,CAACQ,IAAI,CAACU,MAAM,KAAKd,eAAe,CAACc,MAAM,IAAIjB,QAAQ,KAAK,IAAI,IACzED,YAAY,CAACQ,IAAI,CAACU,MAAM,KAAKd,eAAe,CAACc,MAAM,GAAG,CAAC,IAAIjB,QAAQ,KAAK,IAAI,EAC3E;MACD,MAAMkB,OAAO,GAAGnB,YAAY,CAACQ,IAAI,CAACC,GAAG,CAAEI,GAAG,IAAG;QAC3C,IAAI,CAAC,GAAGT,eAAe,CAACK,GAAG,CAAEO,IAAI,IAAGA,IAAI,CAACC,SAAS,CAAC,CAAC,CAACG,QAAQ,CAACP,GAAG,CAACI,SAAS,CAAC,EAAC;UAC3EJ,GAAG,CAACF,GAAG,GAAG,KAAK;QACjB,CAAC,MAAI;UACHE,GAAG,CAACF,GAAG,GAAG,IAAI;QAChB;QACA,OAAOE,GAAG;MACZ,CAAC,CAAC;MACF,IAAGZ,QAAQ,KAAK,IAAI,EAAC;QACnBI,kBAAkB,CAACc,OAAO,CAAC;MAC7B,CAAC,MAAI;QACHd,kBAAkB,CAACS,IAAI,IAAE,CAAC,GAAGA,IAAI,EAACb,QAAQ,CAAC,CAAC;MAC9C;IAEF;;IAEA;IACA;IACA;EAGJ,CAAC,EAAC,CAACD,YAAY,EAACC,QAAQ,CAAC,CAAC;EAE1BX,SAAS,CAAC,MAAM;IACZ,IAAIgB,UAAU,CAACe,OAAO,EAAE;MACtBf,UAAU,CAACe,OAAO,CAACC,cAAc,CAAC;QAChCC,QAAQ,EAAE,QAAQ;QAClBC,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;IACA,OAAO,MAAM,CAAC,CAAC;EACjB,CAAC,EAAE,CAACxB,YAAY,EAACC,QAAQ,CAAC,CAAC;EAG3B,oBACEJ,OAAA;IAAK4B,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC1BtB,eAAe,IAAIuB,KAAK,CAACC,OAAO,CAACxB,eAAe,CAAC,IAAIA,eAAe,CAACc,MAAM,GAAG,CAAC,IAAId,eAAe,CAACK,GAAG,CAAC,CAACI,GAAG,EAAEgB,GAAG,KAAK;MAClH,oBACAhC,OAAA;QAAKiC,GAAG,EAAExB,UAAW;QAACmB,SAAS,EAAC,SAAS;QAAAC,QAAA,gBACrC7B,OAAA,CAACH,UAAU;UAACqC,IAAI,EAAElB,GAAG,CAACmB;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAChCvC,OAAA,CAACF,UAAU;UAACW,UAAU,EAAEA,UAAW;UAAC+B,QAAQ,EAAExB,GAAG,CAACwB,QAAS;UAACC,OAAO,EAAEzB,GAAG,CAACF;QAAI;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA,GAFpC,OAAMP,GAAI,EAAC;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGtD,CAAC;IACT,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACrC,EAAA,CAvEID,OAAO;EAAA,QACmBL,OAAO;AAAA;AAAA8C,EAAA,GADjCzC,OAAO;AAyEb,eAAeA,OAAO;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}