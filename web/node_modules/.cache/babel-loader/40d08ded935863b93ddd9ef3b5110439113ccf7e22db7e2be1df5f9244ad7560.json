{"ast":null,"code":"var _jsxFileName = \"/home/yuval/Desktop/chatbot_app/Chatbot/web/src/components/LeftMenu/NavChatsList/NavChatList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport NavChat from \"./NavChat\";\nimport NewNavChat from \"./NewNavChat\";\nimport { useChat } from \"../../../contexts/ChatContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NavChatList = props => {\n  _s();\n  const {\n    chats,\n    loading\n  } = useChat();\n  const [currentChats, setCurrentChats] = useState(null);\n  useEffect(() => {\n    // Compare previous chats with current chats\n    // For simplicity, let's assume that chats are considered new if the length changes\n\n    const isNewChat = currentChats.length !== chats.length;\n    if (isNewChat) {\n      const newChats = chats.map(chat => ({\n        ...chat,\n        new: !currentChats.find(c => c.id === chat.id)\n      }));\n\n      // Do something when a new chat is detected\n      console.log('New chat detected!');\n      // Update the state to trigger a re-render\n      setCurrentChats(chats);\n    }\n  }, [chats, currentChats]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"LOADING...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navPromptWrapper\",\n      children: chats.map((chat, index) => /*#__PURE__*/_jsxDEV(NavChat, {\n        title: chat.title\n      }, `chat_${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n_s(NavChatList, \"w1nabpq//75o3L2iXea9VUUuffA=\", false, function () {\n  return [useChat];\n});\n_c = NavChatList;\nexport default NavChatList;\nvar _c;\n$RefreshReg$(_c, \"NavChatList\");","map":{"version":3,"names":["React","useEffect","useState","NavChat","NewNavChat","useChat","jsxDEV","_jsxDEV","Fragment","_Fragment","NavChatList","props","_s","chats","loading","currentChats","setCurrentChats","isNewChat","length","newChats","map","chat","new","find","c","id","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","className","index","title","_c","$RefreshReg$"],"sources":["/home/yuval/Desktop/chatbot_app/Chatbot/web/src/components/LeftMenu/NavChatsList/NavChatList.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport NavChat from \"./NavChat\";\nimport NewNavChat from \"./NewNavChat\";\n\nimport { useChat } from \"../../../contexts/ChatContext\";\nconst NavChatList = (props) => {\n    const {chats,loading} = useChat()\n    const [currentChats,setCurrentChats] = useState(null);\n\n\n    useEffect(() => {\n        // Compare previous chats with current chats\n        // For simplicity, let's assume that chats are considered new if the length changes\n\n        \n        const isNewChat = currentChats.length !== chats.length;\n\n    \n        if (isNewChat) {\n            const newChats = chats.map((chat) => ({ ...chat, new: !currentChats.find((c) => c.id === chat.id) }));\n\n          // Do something when a new chat is detected\n          console.log('New chat detected!');\n          // Update the state to trigger a re-render\n          setCurrentChats(chats);\n        }\n      }, [chats, currentChats]);\n\n    return (\n        <>\n        {loading ? (<>\n            <div>\n                LOADING...\n            </div>\n        </>) : \n            (\n                <div className=\"navPromptWrapper\">\n                    {chats.map((chat, index) =>\n                        <NavChat title={chat.title} key={`chat_${index}`} />)\n                    }\n                </div>\n            )}\n        </>\n    );\n}\nexport default NavChatList;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,UAAU,MAAM,cAAc;AAErC,SAASC,OAAO,QAAQ,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACxD,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC3B,MAAM;IAACC,KAAK;IAACC;EAAO,CAAC,GAAGT,OAAO,CAAC,CAAC;EACjC,MAAM,CAACU,YAAY,EAACC,eAAe,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAGrDD,SAAS,CAAC,MAAM;IACZ;IACA;;IAGA,MAAMgB,SAAS,GAAGF,YAAY,CAACG,MAAM,KAAKL,KAAK,CAACK,MAAM;IAGtD,IAAID,SAAS,EAAE;MACX,MAAME,QAAQ,GAAGN,KAAK,CAACO,GAAG,CAAEC,IAAI,KAAM;QAAE,GAAGA,IAAI;QAAEC,GAAG,EAAE,CAACP,YAAY,CAACQ,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKJ,IAAI,CAACI,EAAE;MAAE,CAAC,CAAC,CAAC;;MAEvG;MACAC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACjC;MACAX,eAAe,CAACH,KAAK,CAAC;IACxB;EACF,CAAC,EAAE,CAACA,KAAK,EAAEE,YAAY,CAAC,CAAC;EAE3B,oBACIR,OAAA,CAAAE,SAAA;IAAAmB,QAAA,EACCd,OAAO,gBAAIP,OAAA,CAAAE,SAAA;MAAAmB,QAAA,eACRrB,OAAA;QAAAqB,QAAA,EAAK;MAEL;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC,gBACR,CAAC,gBAEKzB,OAAA;MAAK0B,SAAS,EAAC,kBAAkB;MAAAL,QAAA,EAC5Bf,KAAK,CAACO,GAAG,CAAC,CAACC,IAAI,EAAEa,KAAK,kBACnB3B,OAAA,CAACJ,OAAO;QAACgC,KAAK,EAAEd,IAAI,CAACc;MAAM,GAAO,QAAOD,KAAM,EAAC;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAExD;EACR,gBACH,CAAC;AAEX,CAAC;AAAApB,EAAA,CAvCKF,WAAW;EAAA,QACWL,OAAO;AAAA;AAAA+B,EAAA,GAD7B1B,WAAW;AAwCjB,eAAeA,WAAW;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}