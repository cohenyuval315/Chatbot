{"ast":null,"code":"import { v4 as uuid } from \"uuid\";\nclass APIClient {\n  constructor() {\n    this.instance = null;\n    if (APIClient.instance === null) {\n      APIClient.instance = new APIClient();\n      this.host = \"localhost\";\n      this.port = 3001;\n      this.base_url = `${this.host}:${this.port}`;\n    }\n  }\n  async _request(method, endpoint, body = null) {\n    const requestOptions = {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    if (body !== null) {\n      requestOptions.body = JSON.stringify(body);\n    }\n    try {\n      const response = await fetch(`${this.base_url}${endpoint}`, requestOptions);\n      const data = await response.json();\n      if (response.ok) {\n        return data;\n      } else {\n        console.error(`Request failed with status ${response.status}: ${data.message}`);\n        throw new Error(data.message || 'An error occurred during the request.');\n      }\n    } catch (error) {\n      console.error(error.message);\n      throw error;\n    }\n  }\n  async fetchChats() {\n    // get /c\n    const endpoint = \"/c\";\n    const method = \"GET\";\n    const url = this.base_url + path;\n    const response = await fetch(url, {\n      method: method,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const res = await response.json();\n    if (res.statusCode !== 200) {\n      return [];\n    } else {\n      return res.data;\n    }\n    const chatData = [{\n      \"id\": uuid(),\n      \"title\": \"hello\",\n      \"log\": [{\n        id: uuid(),\n        prompt: \"text1(user)\",\n        response: \"text1(bot)\"\n      }, {\n        id: uuid(),\n        prompt: \"text2(user)\",\n        response: \"text2(bot)\"\n      }]\n    }, {\n      \"id\": uuid(),\n      \"title\": \"hello2\",\n      \"log\": [{\n        id: uuid(),\n        prompt: \"text3(user)\",\n        response: \"text1(bot)\"\n      }, {\n        id: uuid(),\n        prompt: \"text2(user)\",\n        response: \"text2(bot)\"\n      }]\n    }];\n    await this.sleep(1000);\n    return chatData;\n  }\n  sleep(ms) {\n    return new Promise(resolve => {\n      setTimeout(resolve, ms);\n    });\n  }\n  async converse(chat, prompt) {\n    const chat_id = chat.id;\n    if (!chat_id) {\n      return await self.create_new_chat(prompt);\n    } else {\n      return await self.update_chat(chat_id, prompt);\n    }\n  }\n  async create_new_chat(prompt) {\n    const path = \"/c\";\n    const method = \"POST\";\n    const url = this.base_url + path;\n    const data = {\n      \"prompt\": prompt\n    };\n    const response = await fetch(url, {\n      method: method,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    const res = await response.json();\n    if (res.statusCode !== 200) {\n      return res.message;\n    } else {\n      return res.data;\n    }\n  }\n  async update_chat(chat_id, prompt) {\n    const path = `/c/${chat_id}`;\n    const method = \"PUT\";\n    const url = this.base_url + path;\n    const data = {\n      \"prompt\": prompt\n    };\n    const response = await fetch(url, {\n      method: method,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    const res = await response.json();\n    if (res.statusCode !== 200) {\n      return res.message;\n    } else {\n      return res.data;\n    }\n  }\n}\nlet client = new APIClient();\nexport default client;","map":{"version":3,"names":["v4","uuid","APIClient","constructor","instance","host","port","base_url","_request","method","endpoint","body","requestOptions","headers","JSON","stringify","response","fetch","data","json","ok","console","error","status","message","Error","fetchChats","url","path","res","statusCode","chatData","id","prompt","sleep","ms","Promise","resolve","setTimeout","converse","chat","chat_id","self","create_new_chat","update_chat","client"],"sources":["/home/yuval/Desktop/chatbot_app/Chatbot/web/src/API/APIClient.jsx"],"sourcesContent":["import { v4 as uuid } from \"uuid\";\n\nclass APIClient {\n    instance = null; \n    constructor() {  \n        if (APIClient.instance === null) {\n\n            APIClient.instance = new APIClient();\n            this.host = \"localhost\"\n            this.port = 3001\n            this.base_url = `${this.host}:${this.port}`;\n        }\n    }\n\n  async _request(method,endpoint, body = null) {\n    const requestOptions = {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    };\n    if (body !== null) {\n      requestOptions.body = JSON.stringify(body);\n    }\n  \n    try {\n      const response = await fetch(`${this.base_url}${endpoint}`, requestOptions);\n      const data = await response.json();\n      if (response.ok) {\n        return data; \n      } else {\n        console.error(`Request failed with status ${response.status}: ${data.message}`);\n        throw new Error(data.message || 'An error occurred during the request.');\n      }\n    } catch (error) {\n      console.error(error.message);\n      throw error;\n    }\n  }\n    async fetchChats() {\n\n      // get /c\n      const endpoint = \"/c\"\n      const method = \"GET\"\n      const url = this.base_url + path\n      const response = await fetch(url, {\n        method: method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n        }\n      });\n      const res = await response.json();\n      if (res.statusCode !== 200){\n        return []\n      }else{\n        return res.data\n      }\n\n        const chatData = [\n            {\n              \"id\":uuid(),\n              \"title\":\"hello\",\n              \"log\": [\n                {\n                  id:uuid(),\n                  prompt:\"text1(user)\",\n                  response:\"text1(bot)\",\n                },\n                {\n                  id:uuid(),\n                  prompt:\"text2(user)\",\n                  response:\"text2(bot)\",\n                }          \n              ]\n            },\n            {\n              \"id\":uuid(),\n              \"title\":\"hello2\",\n              \"log\": [\n                {\n                  id:uuid(),\n                  prompt:\"text3(user)\",\n                  response:\"text1(bot)\",\n                },\n                {\n                  id:uuid(),\n                  prompt:\"text2(user)\",\n                  response:\"text2(bot)\",\n                }          \n              ]\n            }\n        ]\n        await this.sleep(1000);\n        return chatData\n    }\n\n    sleep(ms) {\n      return new Promise(resolve => {\n        setTimeout(resolve, ms);\n      });\n    }\n    \n    async converse(chat,prompt){\n      const chat_id = chat.id\n      if (!chat_id){\n        return await self.create_new_chat(prompt)\n      }else{\n        return await self.update_chat(chat_id,prompt)\n      }\n    }\n\n    async create_new_chat(prompt){\n      const path = \"/c\"\n      const method = \"POST\"\n      const url = this.base_url + path\n      const data = {\n        \"prompt\":prompt\n      }\n      const response = await fetch(url, {\n        method: method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      const res = await response.json();\n      if (res.statusCode !== 200){\n        return res.message\n      }else{\n        return res.data\n      }\n    }\n\n    async update_chat(chat_id,prompt){\n      const path = `/c/${chat_id}`\n      const method = \"PUT\"\n      const url = this.base_url + path\n      const data = {\n        \"prompt\":prompt\n      }\n      const response = await fetch(url, {\n        method: method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      const res = await response.json();\n      if (res.statusCode !== 200){\n        return res.message\n      }else{\n        return res.data\n      }\n    }\n\n}\n\n\nlet client = new APIClient();\n\n\nexport default client;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}