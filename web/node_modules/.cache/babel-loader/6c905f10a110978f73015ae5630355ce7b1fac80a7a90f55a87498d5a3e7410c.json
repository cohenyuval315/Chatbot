{"ast":null,"code":"var _jsxFileName = \"/home/yuval/Desktop/chatbot_app/Chatbot/web/src/contexts/ChatContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport client from '../API/APIClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\nexport function useChat() {\n  _s();\n  return useContext(ChatContext);\n}\n_s(useChat, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const newChat = {\n  \"id\": null,\n  \"title\": null,\n  \"log\": []\n};\nexport const introChat = {\n  \"id\": -1,\n  \"title\": null,\n  \"log\": []\n};\nexport function ChatProvider({\n  children\n}) {\n  _s2();\n  const [chats, setChats] = useState([]);\n  const [selectedChat, setSelectedChat] = useState(introChat);\n  const [responseFromAPI, setReponseFromAPI] = useState(false);\n  const [botResponse, setBotResponse] = useState(null);\n  const [showIntro, setShowIntro] = useState(true);\n  const [inputDisable, setInputDisable] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [selectedChatLoading, setSelectedChatLoading] = useState(false);\n  const [selectedChatError, setSelectedChatError] = useState(false);\n  const [error, setError] = useState(false);\n  const printInterval = 50;\n  const fetchChats = useCallback(async () => {\n    try {\n      const chatsData = await client.fetchChats();\n      setChats(chatsData);\n      setError(false);\n      setLoading(false);\n      return chatsData;\n    } catch (error) {\n      console.error(error);\n      setError(error);\n    }\n  }, []);\n  const createNewChat = async prompt => {\n    try {\n      const data = await client.create_new_chat(prompt);\n      setError(false);\n      return data;\n    } catch (error) {\n      setError(error);\n    }\n  };\n  useEffect(() => {\n    fetchChats();\n  }, []);\n  const onChatSelect = async item => {\n    try {\n      setSelectedChatLoading(true);\n      const chatData = await client.get_chat(chat_id);\n      setSelectedChat(chatData);\n      setSelectedChatLoading(false);\n      setSelectedChatError(false);\n      return chatData;\n    } catch (error) {\n      console.error(error);\n      setSelectedChatError(error);\n      setSelectedChatLoading(false);\n    }\n  };\n  const onNewChatSelect = () => {\n    setSelectedChat(newChat);\n  };\n  const onMessageNewChat = async prompt => {\n    const item = await createNewChat(prompt);\n    if (item) {\n      const selected = await onChatSelect(data);\n      if (selected) {\n        const items = await fetchChats();\n        if (items) {} else {\n          console.error(\"could not update chats items\");\n        }\n      } else {\n        console.error(\"could not select new chat\");\n      }\n    } else {\n      console.error(\"could not create new chat\");\n    }\n  };\n  const onChatConverse = async prompt => {\n    if (selectedChat && selectedChat.id !== null) {}\n    const res = await client.update_chat(selectedChat.id, prompt);\n  };\n  const finishIntro = () => {\n    if (showIntro === true) {\n      setShowIntro(false);\n    }\n  };\n  const onChatSelectOLD = title => {\n    console.debug(\"on chat select\");\n    if (!responseFromAPI) {\n      setInputDisable(false);\n      const item = chats.filter(chat => chat.title === title);\n      if (item.length === 1) {\n        const sc = item[0];\n        console.debug(\"on select ,selected chat:\", sc);\n        setSelectedChat(sc);\n      } else {\n        console.error(\"cant find selected chat: \", title);\n      }\n    }\n    finishIntro();\n  };\n  const onChatNew = () => {\n    console.debug(\"on chat new\");\n    if (!responseFromAPI && selectedChat.id !== null) {\n      setSelectedChat(newChat);\n      setBotResponse(null);\n      setInputDisable(false);\n    }\n    finishIntro();\n  };\n  const addNewChat = (chatId, title, initialPrompt) => {\n    console.debug(\"add new chat\");\n    if (selectedChat.id !== null) {\n      return;\n    }\n    const newUpdatedChat = {\n      id: chatId,\n      title: title,\n      log: [initialPrompt]\n    };\n    setChats([newUpdatedChat, ...chats]);\n    setSelectedChat(newUpdatedChat);\n  };\n  useEffect(() => {\n    if (botResponse && !error) {\n      updateSelectedChat(botResponse);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [botResponse]);\n  const updateSelectedChat = newChat => {\n    const updatedLog = newChat.id === -1 ? [...selectedChat.log, newChat] : selectedChat.log.map(chat => {\n      if (chat.id === -1) {\n        return newChat;\n      }\n      return chat;\n    });\n    const updatedChat = {\n      id: selectedChat.id,\n      title: selectedChat.title,\n      log: updatedLog\n    };\n    setSelectedChat(updatedChat);\n    const updatedChats = chats.map(item => {\n      return item.id === selectedChat.id ? updatedChat : item;\n    });\n    setChats(updatedChats);\n    setBotResponse(null);\n    setInputDisable(false);\n  };\n  const onChatConverseold = async prompt => {\n    console.debug(\"chat converse\");\n    if (!responseFromAPI) {\n      try {\n        setReponseFromAPI(true);\n        //setInputDisable(true);\n        const initialPrompt = {\n          id: -1,\n          prompt: prompt\n        };\n        setBotResponse(initialPrompt);\n        const res = await client.converse(selectedChat, prompt);\n        const chatId = res.id;\n        const title = res.title;\n        const response = res.data;\n        setReponseFromAPI(false);\n        setError(false);\n        if (selectedChat.id === null) {\n          addNewChat(chatId, title, initialPrompt);\n        }\n        setBotResponse(response);\n      } catch (err) {\n        setError(err);\n        console.log(err);\n      } finally {\n        console.debug(selectedChat);\n      }\n    }\n  };\n  const regenerateMessage = async () => {};\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      chats,\n      loading,\n      error,\n      inputDisable,\n      selectedChat,\n      onChatSelect,\n      responseFromAPI,\n      onChatNew,\n      printInterval,\n      regenerateMessage,\n      showIntro,\n      finishIntro,\n      onChatConverse\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n}\n_s2(ChatProvider, \"/ohGgCqYyVO9PUG/eUnA9yWw0Zk=\");\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useCallback","useContext","useEffect","useState","client","jsxDEV","_jsxDEV","ChatContext","useChat","_s","newChat","introChat","ChatProvider","children","_s2","chats","setChats","selectedChat","setSelectedChat","responseFromAPI","setReponseFromAPI","botResponse","setBotResponse","showIntro","setShowIntro","inputDisable","setInputDisable","loading","setLoading","selectedChatLoading","setSelectedChatLoading","selectedChatError","setSelectedChatError","error","setError","printInterval","fetchChats","chatsData","console","createNewChat","prompt","data","create_new_chat","onChatSelect","item","chatData","get_chat","chat_id","onNewChatSelect","onMessageNewChat","selected","items","onChatConverse","id","res","update_chat","finishIntro","onChatSelectOLD","title","debug","filter","chat","length","sc","onChatNew","addNewChat","chatId","initialPrompt","newUpdatedChat","log","updateSelectedChat","updatedLog","map","updatedChat","updatedChats","onChatConverseold","converse","response","err","regenerateMessage","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/yuval/Desktop/chatbot_app/Chatbot/web/src/contexts/ChatContext.jsx"],"sourcesContent":["\nimport React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport client from '../API/APIClient';\n\n\nconst ChatContext = createContext();\n\nexport function useChat() {\n  return useContext(ChatContext);\n}\n\nexport const newChat = {\n  \"id\":null,\n  \"title\":null,\n  \"log\":[]\n}\n\nexport const introChat = {\n  \"id\":-1,\n  \"title\":null,\n  \"log\":[]\n}\n\n\n\n\nexport function ChatProvider({ children }) {\n  const [chats, setChats] = useState([]);\n  const [selectedChat, setSelectedChat] = useState(introChat);\n  \n  \n  const [responseFromAPI,setReponseFromAPI] = useState(false);\n  const [botResponse, setBotResponse] = useState(null);\n  const [showIntro, setShowIntro] = useState(true);\n\n\n  const [inputDisable, setInputDisable] = useState(false);\n\n  const [loading, setLoading] = useState(true)\n  const [selectedChatLoading, setSelectedChatLoading] = useState(false);\n  const [selectedChatError, setSelectedChatError] = useState(false);\n\n  const [error, setError] = useState(false);\n\n  const printInterval = 50;\n\n\n\n  const fetchChats = useCallback(async () => {\n    try {\n      const chatsData = await client.fetchChats()\n      setChats(chatsData);\n      setError(false);\n      setLoading(false);\n      return chatsData;\n    } catch (error) {\n      console.error(error);\n      setError(error);\n    }\n  },[])\n\n  const createNewChat = async (prompt) => {\n    try {\n      const data = await client.create_new_chat(prompt);\n      setError(false);\n      return data;\n    } catch (error){\n      setError(error);\n    }\n  }\n\n  useEffect(()=>{\n    fetchChats();\n  },[])\n\n\n  const onChatSelect = async  (item) => {\n    try {\n      setSelectedChatLoading(true);\n      const chatData = await client.get_chat(chat_id);\n      setSelectedChat(chatData);\n      setSelectedChatLoading(false);\n      setSelectedChatError(false);\n      return chatData;\n    } catch (error){\n      console.error(error);\n      setSelectedChatError(error);\n      setSelectedChatLoading(false);\n    }\n    \n  }\n\n  const onNewChatSelect = () => {\n    setSelectedChat(newChat);\n  }\n\n  const onMessageNewChat = async (prompt) => {\n    const item = await createNewChat(prompt);\n    if (item){\n      const selected = await onChatSelect(data);\n      if (selected){\n        const items = await fetchChats();\n        if (items){\n\n        }else{\n          console.error(\"could not update chats items\");\n        }\n\n      }else{\n        console.error(\"could not select new chat\");\n      }\n    }else{\n      console.error(\"could not create new chat\");\n    }\n  }\n\n\n  const onChatConverse = async (prompt) => {\n    if (selectedChat && selectedChat.id !== null){\n      \n    }\n    const res = await client.update_chat(selectedChat.id,prompt);\n\n\n  }\n\n\n\n\n\n\n\n  const finishIntro = () => {\n    if(showIntro === true){\n      setShowIntro(false);\n    }\n  }\n\n  const onChatSelectOLD = (title) => {\n    console.debug(\"on chat select\")\n    if(!responseFromAPI){\n      setInputDisable(false);\n      const item = chats.filter((chat)=>chat.title === title);\n      if (item.length === 1){\n        const sc = item[0];\n        console.debug(\"on select ,selected chat:\",sc)\n        setSelectedChat(sc)\n      }else{\n        console.error(\"cant find selected chat: \",title)\n      }\n    }\n    finishIntro();\n  }\n\n\n\n\n  const onChatNew = () => {\n    console.debug(\"on chat new\")\n    if(!responseFromAPI && selectedChat.id !== null){\n      setSelectedChat(newChat);\n      setBotResponse(null);\n      setInputDisable(false);\n    }\n    finishIntro();\n  }\n\n  const addNewChat = (chatId,title,initialPrompt) => {\n    console.debug(\"add new chat\")\n    if(selectedChat.id !== null){\n      return;\n    }\n    const newUpdatedChat = {\n      id:chatId,\n      title:title,\n      log:[initialPrompt]\n    }\n    setChats([newUpdatedChat,...chats])\n    setSelectedChat(newUpdatedChat);\n  }\n\n  useEffect(() => {\n    if(botResponse && !error){\n      updateSelectedChat(botResponse)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [botResponse])\n\n\n  const updateSelectedChat = (newChat) => {\n    const updatedLog = newChat.id === -1 ? [...selectedChat.log,newChat] : selectedChat.log.map((chat)=>{\n      if(chat.id === -1){\n        return newChat;\n      }\n      return chat;\n    });\n    const updatedChat = {\n      id:selectedChat.id,\n      title:selectedChat.title,\n      log: updatedLog\n    }          \n    setSelectedChat(updatedChat);\n    const updatedChats = chats.map((item)=>{\n      return item.id === selectedChat.id ? updatedChat : item;\n    })\n    setChats(updatedChats);\n    setBotResponse(null);\n    setInputDisable(false);\n  }\n\n  const onChatConverseold = async (prompt) => {\n    console.debug(\"chat converse\")\n    if (!responseFromAPI) {\n      try {\n\n        setReponseFromAPI(true);\n        //setInputDisable(true);\n        const initialPrompt = {\n          id:-1,\n          prompt: prompt\n        }\n        setBotResponse(\n          initialPrompt\n        );\n        const res = await client.converse(selectedChat,prompt);\n        const chatId = res.id;\n        const title = res.title;\n        const response = res.data;\n        setReponseFromAPI(false);\n        setError(false);\n        if(selectedChat.id === null){\n          addNewChat(chatId,title,initialPrompt);\n        }\n        setBotResponse(response);\n      } catch (err) {\n        setError(err);\n        console.log(err);\n      }finally{\n        console.debug(selectedChat);\n      }\n    }\n  }\n\n\n  const regenerateMessage = async () => {\n\n  }\n\n\n  return (\n    <ChatContext.Provider value={{ \n      chats, \n      loading,\n      error,\n      inputDisable,\n      selectedChat, \n      onChatSelect, \n      responseFromAPI,\n      onChatNew,\n      printInterval,\n      regenerateMessage,\n      showIntro,\n      finishIntro,\n      onChatConverse }}>\n      {children}\n    </ChatContext.Provider>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}