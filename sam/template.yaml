AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  chatbot
Metadata:
  AWS::ServerlessRepo::Application:
    Name: chatbot
    Description: description
    Author: Yuval Cohen
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ['tests']
    HomePageUrl: https://github.com/cohenyuval315/Chatbot
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/cohenyuval315/Chatbot





Globals: # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
  Api:
    Name: MyApi
    Cors:
      AllowMethods: "'OPTIONS, PUT, POST, GET, DELETE'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
      MaxAge: "'600'"

  Function:
    Architectures:
    - x86_64
    Tracing: Active
    Tags:
      LambdaPowertools: python
    Timeout: 600
    MemorySize: 2048
    Runtime: python3.9
    Environment:
      Variables:
        LOG_LEVEL: INFO
        STAGE: Dev #Prod    
        POWERTOOLS_SERVICE_NAME: conversation # Powertools for AWS Lambda (Python) env vars: https://awslabs.github.io/aws-lambda-powertools-python/#environment-variables
        POWERTOOLS_METRICS_NAMESPACE: ServerlessConversation
        POWERTOOLS_DEV: 'true'
        POWERTOOLS_DEBUG: 'true'
        POWERTOOLS_LOGGER_LOG_EVENT : 'true'
        

Resources:

  MyServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev

  ConverseFunction:
    Type: AWS::Serverless::Function   
    Properties:
      Timeout: 6000
      Handler: lambda_function.lambda_handler
      CodeUri: functions
      Description: conversation with chatbot
      Events: 
        HelloPath:
          Type: Api           
          Properties:
            Path: /hello
            Method: GET
            
        ChatsPath:
          Type: Api           
          Properties:
            Path: /c
            Method: GET                  
            
        NewChatPath:
          Type: Api           
          Properties:
            Path: /c
            Method: POST
            
        ChatPath:
          Type: Api           
          Properties:
            Path: /c/{chat_id}
            Method: GET                
            
        ConversePath:
          Type: Api           
          Properties:
            Path: /c/{chat_id}
            Method: PUT
            
        DeleteChatPath:
          Type: Api           
          Properties:
            Path: /c/{chat_id}
            Method: DELETE 

        ModelsPath:
          Type: Api
          Properties:
            Path: /m
            Method: GET                       

        CorsOptions:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: OPTIONS                       

  WarmUpFunction:
    Type: AWS::Serverless::Function   
    Properties:
      Timeout: 6000
      MemorySize: 4096
      Handler: warm_up_lambda.lambda_handler 
      CodeUri: functions 
      Description: initialize the application
      Events:
        YourEvent:
          Type: Api
          Properties:
            Path: /start
            Method: GET 

  CoolDownFunction:
    Type: AWS::Serverless::Function   
    Properties:
      Handler: cool_down_lambda.lambda_handler 
      CodeUri: functions 
      Description: clean-up function
      Events:
        YourEvent:
          Type: Api
          Properties:
            Path: /stop
            Method: GET 



  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

Outputs:
  ConverseFunction:
    Description: conversation with chatbot Lambda Function ARN
    Value: !GetAtt ConverseFunction.Arn

  WarmUpFunction:
    Description: load model chatbot Lambda Function ARN
    Value: !GetAtt WarmUpFunction.Arn

  CoolDownFunction:
    Description: load model chatbot Lambda Function ARN
    Value: !GetAtt CoolDownFunction.Arn
